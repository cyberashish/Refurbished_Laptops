generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullname                  String?
  email                     String   @unique
  password                  String?
  phone                     String?  
  image                     String?
  googleId                  String?
  verificationToken         String?
  verificationTokenExpiry   String?
  role                      Role     @default(USER) 
  isVerified                Boolean  @default(false) 
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  addresses           Address[]  
  orders              Order[]    
  wishlist            Wishlist[] 
  cart                CartItem[] 
  reviews             Review[]  
}

enum Role {
  USER
  ADMIN
  SELLER
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street     String
  flat       String?
  firstName  String
  lastName   String
  city       String
  state      String
  country    String
  zipCode    String
  phone      String
  isDefault  Boolean  @default(false) 
  createdAt  DateTime @default(now())
}

model Order {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount     Float
  status          OrderStatus  @default(PENDING)
  paymentMethod   String
  paymentStatus   PaymentStatus  @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  items           OrderItem[]
  shippingAddress shippingAddress 
}

type shippingAddress{
  id         String 
  userId     String 
  street     String
  flat       String?
  firstName  String
  lastName   String
  city       String
  state      String
  country    String
  zipCode    String
  phone      String
  isDefault  Boolean 
  createdAt  DateTime
}


enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  laptopId  String
  laptop    Laptop @relation(fields: [laptopId], references: [id], onDelete: Restrict)
  quantity  Int
  price     Float
}


model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  laptopId  String
  laptop    Laptop  @relation(fields: [laptopId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  laptopId  String
  laptop    Laptop  @relation(fields: [laptopId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([userId, laptopId])
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  laptopId   String
  laptop     Laptop  @relation(fields: [laptopId], references: [id], onDelete: Cascade)
  rating     Int      @default(5) 
  comment    String?
  createdAt  DateTime @default(now())
}

model Coupon {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  code         String 
  discount     Float    
  type         CouponType? 
  usageLimit   Int?     
  usedCount    Int?      @default(0) 
  minOrder     Float?   
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt 
}

enum CouponType {
  PERCENTAGE
  FIXED
}





model Laptop {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  brand             String
  modelSeries       String
  modelNumber       String
  dimensions        Dimensions
  bodyMaterial      String[]
  category          String
  image             String[]
  carouselImages    String[]
  title             String @unique
  titleSlug         String @unique
  rating           Int
  pricing          Pricing
  discountPercentage Int
  stock            Stock
  brandColor       String
  specifications   Specifications
  orders           OrderItem[]
  wishlist         Wishlist[]
  cart             CartItem[]
  reviews          Review[]
}

type Dimensions {
  height     Float
  width      Float
  depth      Float
  weightUnit Float
}

type Pricing {
  actualPrice     String
  discountedPrice String
}

type Stock {
  quantity    Int
  isAvailable Boolean
}

type Specifications {
  processor      Processor
  ram            RAM
  storage        Storage
  gpu            GPU
  display        Display
  batteryLife    BatteryLife
  charging       Charging
  additionalFeatures String[]
  camera         Camera
  os            OS
  connectivity  Connectivity
  ports         Ports
  warranty      Warranty
}

type Processor {
  brand      String
  type       String
  generation String
  variant    String?
  cores      String
  baseSpeed  Float
  turboSpeed Float?
}

type RAM {
  type         String
  capacity     String
  frequency    Int
  configuration String?
}

type Storage {
  type         String
  hddCapacity  String
  ssdCapacity  String
}

type GPU {
  brand String
  model String
  processorType  String
}

type Display {
  sizeInInches         Float
  sizeInCms            Float
  type                 String
  resolution           String
  aspectRatio          String
  touchScreen          Boolean
  refreshRate          Int
  additionalSpecifications String
}

type BatteryLife {
  usageTime   Int
  standbyTime Int
}

type Charging {
  fastCharging Boolean
  wattage      Int
  portType     String
  chargingTime Float
}

type Camera {
  type      String
  resolution String
  features  String[]
}

type OS {
  type         String
  name         String
  architecture String
}

type Connectivity {
  bluetoothSupported Boolean
  bluetoothVersion   String
  bluetoothFeatures  String[]
  wifiSupported      Boolean
  wifiSpecifications String
}

type Ports {
  auxPortType        String
  usbPorts           String[]
  usbTypesSupported  String[]
  hdmi              HDMI
  externalCardSupported String
}

type HDMI {
  count Int
  type  String
}

type Warranty {
  period   String
  coverage String
}
